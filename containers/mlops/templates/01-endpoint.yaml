{% for model in models %}
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{model.model}}-pv"
  labels:
    type: local
    namespace: "{{namespace}}"
    component: "{{model.model}}"
spec:
  storageClass: manual
  capacity:
    storage: "{{model.storage}}"
  accessModes:
  - ReadWriteOnce
  hostPath:
    path: "/mnt/nvme/endpoints/{{model.model}}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{model.model}}-pv-claim"
  namespace: "{{namespace}}"
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: "{{model.storage}}"
  selector:
    matchLabels:
      namespace: "{{namespace}}"
      component: "{{model.model}}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{model.model}}"
  namespace: "{{namespace}}"
spec:
  replicas: "{{model.instances}}"
  selector:
    matchLabels:
      app: "{{model.model}}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: "{{model.model}}"
    spec:
      initContainers:
      - image: quay.io/bdobrica/ml-operator-tools:model-init-latest
        name: "{{model.model}}-init"
        env:
        - name: MODEL_URL
          value: "{{model.artifact}}"
        - name: MODEL_PATH
          value: "/opt/ml"
        volumeMounts:
        - name: "{{model.model}}-persistent-storage"
          mountPath: "/opt/ml"
      containers:
      - image: "{{model.image}}"
        name: "{{model.model}}"
        env:
        - name: MODEL_PATH
          value: "/opt/ml"
        resources:
          limits:
            cpu: "{{model.cpus}}"
            memory: "{{model.memory}}"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: "{{model.model}}-persistent-storage"
          mountPath: "/opt/ml"
          readOnly: true
      volumes:
        - name: "{{model.model}}-persistent-storage"
          persistentVolumeClaim:
            claimName: "{{model.model}}-pv-claim"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{model.model}}"
  namespace: "{{namespace}}"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: "{{model.model}}"
---
{% endfor %}